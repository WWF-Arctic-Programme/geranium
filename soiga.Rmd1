---
runtime: shiny
pagetitle1: Compatibility with AOIs
pagetitle2: Compatibility with AOIs - WWF ArcNet
pagetitle3: Decision Support and Engagement Prioritisation
pagetitle: 🏭🚢🎣🛢 Human use ⚔ Conservation 🐳🐻🐟🐚
author1: "[WWF ArcNet](https://arcticwwf.org/work/ocean/arcnet/)"
zzzpagetitle: Compatibility with AOIs
link-citations: yes
output1: html_document
output:
   flexdashboard::flex_dashboard:
      theme: yeti
      theme2: 
         version: 4
         bootswatch: minty
      logo: https://wwf.ru/assets/img/logo.jpg
      favicon: https://d1diae5goewto1.cloudfront.net/_skins/favicon.png
      orientation: columns
      vertical_layout: fill
      mathjax: ~
      css:
      - site_libs/common.css
      - site_libs/flex_dashboard.css
      - include/geranium.css
      css1:
      - https://nplatonov.github.io/site_libs/common.css
      - https://nplatonov.github.io/site_libs/flex_dashboard.css
      - include/geranium.css
      navbar:
         - { title: "WWF® ArcNet", zzzicon: "fa-info-circle", href: "https://arcticwwf.org/work/ocean/arcnet/", align: right, target: _blank}
output3:
   html_vignette:
      css:
      - https://nplatonov.github.io/site_libs/common.css
      - https://nplatonov.github.io/site_libs/html_vignette.css
---

```{r init643ce921796fb94ae61005778a47b7fe, include=FALSE}
knitr::opts_chunk$set(echo=FALSE,message=FALSE,warning=FALSE)
```

```{r server, code=readLines("server.R")}
```

```{r, eval=T, child="include/welcome.Rmd"}
```

# Spatial query {#map}

## {.mainbar}

### A map for query {data-width=500}

```{r, eval=T & isShiny}
uiOutput("uiMap")
#leafletOutput("viewer")
#editModUI("editor")
#selectModUI("selector")
```

```{r eval=T & isShiny, fig.height=800}
output$uiMap <- renderUI({ ## editor-editModUI / selector-selectModUI / viewer-leafletOutput
   cat("renderUI:\n")
   if (input$region %in% nameEditor) {
      ret <-  editModUI("editor")
   }
   else if (T & input$predefined %in% nameClick) {
      ret <-  selectModUI("selector")
   }
   else { ## selected from list: "PAC "
      ret <- leafletOutput("viewer")
     # ret <- textOutput("note")
   }
   ret
})
```

```{r eval=T & isShiny}
output$viewer <- renderLeaflet({
   a <- rvActivity()$map
   req(!is.null(a))
   coloring <- names(methodList[match(input$coloring,methodList)])
   d6 <- map3_1d(a,kind=coloring,source=input$sheet)
  # write_envi(d6,"c:/tmp/tmp_d6")
   aoi <- rvAOI()
  # if (!is.null(aoi))
  #    saveRDS(aoi,"c:/tmp/tmp_d6.rds")
   m <- conflictMap(d6,aoi=aoi)
   m
})
```

<!--
https://github.com/rstudio/flexdashboard/issues/181
-->

## {#inputs .no-sidebar zzzdata-width="470px" data-width=300}

### Inputs {data-height="auto"}


```{r, eval=isShiny}
width <- c("100%","450px")[2]
if (F)
   shiny::selectInput("sheet","Human use",nameInit,width=width)
if (F)
   shiny::selectInput("column","Industry",nameInit,width=width)
selectInput("region","Spatial query",c(names(regionSF),nameEditor)
           ,selected="PACs" # sample(names(regionSF),1)
           ,width=width)
selectInput("predefined","Region from list",nameInit
          # ,selected=nameSelector
           ,width=width)
if (F)
   selectInput("group","CF group",unname(groupList)
             # ,selected=sample(unname(groupList),1)
              ,selected=unname(ifelse(F,sample(groupList,1),groupList[1]))
             # ,selected="Cetaceans"
              ,width=width)
if (F)
   selectInput("season","Season",seasonList
             # ,selected=ifelse(devel,sample(seasonList,1L),seasonList[1L])
              ,selected=seasonList[1L]
              ,width=width)
```

:::actionButton
[Approve Selection](#crosstable)
:::

### {data-height="auto"}

[Customise my choice](#trafficlight)

[Human activities in the Arctic](#seasonIndustry)

[Conservation Features](#seasonCF)

[Conservation Action Hotspots](#dummy)

[How the assessment was made (TBD-to be developed)](#dummy)

[Dictionary (TBD-to be developed)](#dummy)

[FAQ (TBD-to be developed)](#dummy)

### Selected region (staff only)

```{r, eval=T & isShiny}
renderPrint({
   s2 <- exchange$selection
   if (is.ursa(s2)) {
      ##~ str(names(s2))
      ##~ id <- as.integer(names(s2))
      ##~ names(s2) <- paste(ifelse(all(id %in% seq(83)),"PAC","AOI"),names(s2))
      ret <- as.table(s2)
      id <- as.integer(names(ret))
      names(ret) <- paste(ifelse(all(id %in% seq(83)),"PAC","AOI"),names(ret))
   }
   else if (is_spatial(s2)) {
      ret <- spatial_data(s2)
      ret$area <- spatial_area(s2)*1e-6
   }
   else if (is.null(s2))
      ret <- "Not selected"
   else
      ret <- s2
   if (is.character(ret))
      return(invisible(NULL))
   ret
})
```

<!--
https://stackoverflow.com/questions/43225165/combine-in-flexdashboard-with-multiple-pages-different-types-of-vertical-layout
-->

# Cross-overview {#crosstable style="position: relative;" .no-mobile .no-print data-orientation="rows"}

## Region metrics {data-height=300 style="height: 50pc;"}

### {data-width=200}

![](https://nplatonov.github.io/chicory/pac/assets/r6b3105e3a.png)

### {data-width=200}

![](https://nplatonov.github.io/chicory/pac/assets/r6b3105e3b.png)

### Basic statistics {data-width=300}

Total area

Marine Area

Number of CFs

% covered by existing protected areas


### Compatibility metrics {data-width=200}

Incompatibility Index (All CFs, all industries, all seasons,

normalised per PUs, TBC)

CF group of concern, TBC

Industry of concern, TBC


## Row {style="height: 50pc;" data-height=300}

### {zzzstyle="height: 50vh;"}

```{r, eval=F}
res <- readRDS("slide2.rds")
```

```{r, eval=T}
fillCol(flex=c(NA,NA)
      # ,textOutput("verb")
       ,DT::DTOutput("cross") # %>% shinycssloaders::withSpinner()
      # ,tableOutput("smpl")
       )
```

```{r, eval=F}
output$verb <- renderText({
   paste0(sQuote("flexdashboard")," package version: "
         ,as.character(packageVersion("flexdashboard")))
})
```{r, eval=T}
output$cross <- 
DT::renderDT({
   cat("crosstable -> datatable\n")
   res <- rvActivityStat()
   req(res)
  # res <- input$industry
  # req(res %in% unlist(industries))
   DT::datatable(res,rownames=TRUE,escape=FALSE
                ,class="display overcontent"
                ,extension=c("Scroller","FixedColumns","FixedHeader","Responsive")
                ,selection=list(mode="single",target=c("cell","row+column")[1])
                ,options=list(NULL
                             ,columnDefs=list(list(className='dt-right',targets=seq(1,ncol(res))))
                            # ,scrollY="calc(93vh - 240px)"
                             ,scrollY="calc(50vh - 240px)"
                             ,scrollX=T
                             ,fixedColumns=if (F) F else list(leftColumns=2)
                             ,ordering=F
                             ,scroller=T
                             ,pageLength=nrow(res)
                             ,fixedHeader=F
                             ,responsive=F
                             ,columnDefs=list(list(responsivePriority=1,targets=0)
                                             ,list(responsivePriority=2,targets=3)
                                             ,list(responsivePriority=3,targets=7)
                                             ,list(responsivePriority=4,targets=6)
                                             ,list(responsivePriority=5,targets=4)
                                             ,list(responsivePriority=6,targets=5)
                                             ,list(responsivePriority=7,targets=2)
                                             )
                             ,dom="ift" ## pl
                             )
                )
})
```
```{r, eval=F}
output$smpl <- renderTable(res,align="r",rownames=TRUE)
```

# Industry cut {#industry data-orientation="columns"}

## {data-width=500}

### Incompatibility table for chosen AOI {data-width=500}

```{r eval=isShiny}
##~ renderTable({
fillCol(flex=c(NA,NA)
      # ,shiny::selectInput("industry2","Industry input",nameInit,width=width)
       ,textOutput("crossCol")
       ,DT::DTOutput("listCF")
       )
output$crossCol <- renderText({
   industry <- rvSelectIndustry()
   req(industry)
   unname(industry)
})
output$listCF <- DT::renderDT({
   cat("DT::renderDT\n")
  # b <- rvActivity()$stat
   b <- rvActivityStat()
   print("after rvActivityStat()")
   req(!is.null(b))
   aoi <- rvAOI()
   isAOI <- !is.null(aoi)
   empty <- !nrow(b)
   if (empty) {
      b <- data.frame('No table'=ifelse(isAOI,"Missed conflicted CFs"
                                       ,"Please select AOI to generate table")
                     ,check.names=FALSE)
      return(DT::datatable(b,rownames=FALSE,escape=FALSE
                         # ,extension="Scroller"
                          ,options=list(dom="t",scroller=F)
                          ))
      ##~ ind <- integer()
      ##~ cname <- colnames(b)
      ##~ indC <- integer()
   }
   bname <- colnames(b)
   bname <- c(bname[!(bname %in% unlist(industries))],input$industry)
   b <- b[,bname]
   colnames(b)[match(input$industry,colnames(b))] <- "flag"
   colnames(b)[grep("cover",colnames(b),ignore.case=TRUE)] <- "value1"
   b <- cbind('CF code'=rownames(b),b)
   b$value1 <- as.numeric(b$value1)/100
   b$flag <- sapply(strsplit(b$flag,split="\\D"),function(x) max(as.integer(x)))
   b$flag <- kwdLUT[as.character(b$flag)]
   str(b)
   print(series(b))
   indV <- grep("^value",colnames(b))
   indGr <- b$flag %in% kwdGreen
   indYl <- b$flag %in% kwdYellow
   indRd <- b$flag %in% kwdRed
   if (F) {
      if (length(ind <- grep("^value",colnames(b)))) {
        # b[,ind] <- reformat("lightskyblue1")(b[,ind])
        # if ("value1" %in% colnames(b))
        #    b$value1 <- reformat("lavender")(b$value1)
         for (i in ind) {
            b[,i] <- reformat("lavender")(formattable::percent(b[,i],2))
           # b[,i] <- reformat("lavender")(b[,i])
           # b[,i] <- formattable::percent(b[,i],2)
         }
      }
      if (length(indGr <- b$flag %in% kwdGreen))
         b$flag[indGr] <- formattable::color_tile("palegreen","palegreen")(b$flag[indGr])
      if (length(indYl <- b$flag %in% kwdYellow))
         b$flag[indYl] <- formattable::color_tile("lightgoldenrod","lightgoldenrod")(b$flag[indYl])
      if (length(indRd <- b$flag %in% kwdRed))
         b$flag[indRd] <- formattable::color_tile("lightsalmon","lightsalmon")(b$flag[indRd])
   }
   cname <- colnames(b)
   indC <- grep("flag",cname,ignore.case=TRUE)
   indCode <- grep("(^CF$|^code$|CF.+code)",cname,ignore.case=TRUE)
   if (hlink)
      b[[indCode]] <- paste0("<a href=#section-season>",b[[indCode]],"</a>")
   cname[indCode] <- "CF Code"
   cname[grep("(^CF.+name|^name$)",cname,ignore.case=TRUE)] <- "CF Name"
   cname[indC] <- "Conflict"
   cname[grep("value.*1",cname,ignore.case=TRUE)] <- "Amount portion inside AOI, %"
   cname[grep("value.*2",cname,ignore.case=TRUE)] <- "Amount portion inside AOI masked by activity, %"
   colnames(b) <- cname
   ##~ b <- DT::datatable(b
                ##~ ,rownames=FALSE # is.null(dt$CF)
                ##~ ,escape=FALSE
                ##~ )
   b <- DT::datatable(b,rownames=FALSE,escape=FALSE,selection="single"
                       ,extensions=c("FixedColumns","Scroller","ColReorder")[2]
                       ,options=list(NULL
                                    ,ordering=T
                                    ,scroller=T
                                   # ,scrollY=T
                                    ,scrollY="calc(100vh - 295px)"
                                   # ,fixedColumns=list()
                                   # ,colReorder=F
                                    ,dom="ift"
                                    ,pageLength=nrow(b)
                                    ##~ ,columnDefs=if (!empty) list(list(className='dt-right',targets=ind-1)
                                                                ##~ ,list(className='dt-center',targets=0))
                                                ##~ else NULL
                                    ) # "Bfrtip"
                       )
   if (T) {
     # d <- b[,indC]
      ##~ if (length(indGr <- b$flag %in% kwdGreen))
         ##~ d[indGr] <- formattable::color_tile("palegreen","palegreen")(b$flag[indGr])
      ##~ if (length(indYl <- b$flag %in% kwdYellow))
         ##~ d[indYl] <- formattable::color_tile("lightgoldenrod","lightgoldenrod")(b$flag[indYl])
      ##~ if (length(indRd <- b$flag %in% kwdRed))
         ##~ d[indRd] <- formattable::color_tile("lightsalmon","lightsalmon")(b$flag[indRd])
      b <- DT::formatStyle(b,cname[indC]
                       # ,background=styleColorBar(dt[,cname[8]],'palegreen')
                        ,backgroundColor=DT::styleEqual(c(kwdGreen,kwdYellow,kwdRed)
                                              ,c("palegreen","LemonChiffon","lightsalmon"))
                        ,backgroundSize='95% 18pt'
                        ,backgroundRepeat='no-repeat'
                        ,backgroundPosition='center'
                        )
      if (F)
         b <- DT::formatStyle(b,cname[indV]
                           ,backgroundColor=DT::styleColorBar(b[,indV],'blue')
                           ,backgroundSize='95% 18pt'
                           ,backgroundRepeat='no-repeat'
                           ,backgroundPosition='center'  
                           )
     b <- DT::formatPercentage(b,cname[indV],2)
   }
   # DT::formatPercentage(2,2)
   b
}
#,escape=FALSE
)
```

## CF metadata and map {data-width=200}

```{r, eval=F & isShiny}
fillCol(flex=c(3,4)
       ,tableOutput("tblsuppl")
       ,imageOutput("mapcf")
      # ,width="500px",height="600px"
       )
```

### CF metadata {data-height=200}


```{r, eval=T & isShiny}
#output$tblsuppl <- 
renderTable({
   cat("CF Metadata:\n")
  # req(input$industry %in% unlist(industries))
   ind <- input$listCF_rows_selected
   if (is.integer(ind)) {
      tbl <- rvActivityStat()[ind,,drop=FALSE]
     # ind2 <- ursa:::.sample(grep(tbl[[1]],cfmeta$CF_code))
      ind2 <- ursa:::.sample(grep(rownames(tbl),cfmeta$CF_code))
      req(length(ind2)>0)
      cf <- cfmeta$label[ind2]
      cf <- gsub("^(\\d{4}).*","\\1",cf) # input$cfcode
   }
   else {
      req(cf <- rvSelectCF())
   }
   md <- read.csv(dir(path="requisite",pattern="scenario.*\\.csv$"
                     ,ignore.case=TRUE,full.names=TRUE),check.names=FALSE)
   md <- md[md$CF_code %in% cf,]
   md <- md[md$CF_code %in% cf,grep("(^$|^File_name|groupcode)"
                                   ,colnames(md),invert=TRUE)]
   if (F & hlink)
      md$CF_code <- paste0("<a href=#section-season>",md$CF_code,"</a>")
  # da <- t(as.data.frame(md,check.names=FALSE))
   da <- data.frame(t(md))
   if (F) {
      ret <- DT::datatable(da,colnames=c("","")
                          ,rownames=TRUE,selection="none",escape=FALSE
                   ,extension="Scroller"
                   ,options=list(dom="t",ordering=F
                                ,scroller=T
                               # ,scrollY="300px"
                               # ,autoWidth=FALSE
                               # ,columnDefs=list(list(width='300px',targets=c(1,2)))
                                ))
   }
   else {
      da <- cbind(left=rownames(da),da)
      colnames(da) <- c("","")
      ret <- da
   }
   ret
})
```

### CF map {data-height=200}

```{r eval=T & isShiny}
#output$mapcf <-
renderImage({
   cat("CF Map:\n")
  # req(input$industry %in% unlist(industries))
   ind <- input$listCF_rows_selected
   if (is.integer(ind)) {
      tbl <- rvActivityStat()[ind,,drop=FALSE]
     # ind2 <- ursa:::.sample(grep(tbl[[1]],cfmeta$CF_code))
      ind2 <- ursa:::.sample(grep(rownames(tbl),cfmeta$CF_code))
      req(length(ind2)>0)
      str(ind2)
      cf <- cfmeta$label[ind2]
      cf <- gsub("^(\\d{4}).*","\\1",cf) # input$cfcode
   }
   else {
      req(cf <- rvSelectCF())
   }
   str(cf)
  # req(length(input$cfcode)>0)
   ursa:::.elapsedTime("display -- start")
   g1 <- session_grid()
   sp <- puvspr[puvspr$species %in% cf,]
   am <- pu[pu$ID %in% sp$pu,]
   spatial_data(am) <- sp["amount"]
   g2 <- regrid(spatial_grid(am),expand=1.5)
   session_grid(consistent_grid(g2,ref=c(600,600)))
   ret <- glance(am,fileout=ursa:::.maketmp(ext=".png"),scale=1,retina=1,border=11)
   session_grid(g1)
   ursa:::.elapsedTime("display -- finish")
   list(src=ret,height="ursa")
},deleteFile=T)
```

# CF seasonal {#seasonCF data-orientation="columns"}

## {data-width=500}

### All compapibilities for a single CF {#dummy data-width=500}

```{r eval=T & isShiny}
fillCol(flex=c(NA,1)
       ##~ ,shiny::selectInput("cfcode","CF from crosstable",nameInit,width=width)
       ,selectInput("cfcode","Conservation Feature"
                   ,choices=nameInit
                  # ,choices=cfmeta$label
                  # ,selected=sample(cfmeta$label,1)
                   ,width="680px")
      # ,textOutput("crossCol")
      ##~ # ,htmlOutput('cflink')
       ##~ ,htmlOutput('cfmeta')
      # ,verbatimTextOutput("crossSelection")
       ,DT::DTOutput("cfdata")
       )
##~ fillCol(flex=c(NA,1)
      ##~ # ,selectInput("cfcode","Conservation Feature",cfmeta$label
      ##~ #             ,selected=sample(cfmeta$label,1),width="680px")
       ##~ ,DT::DTOutput('cfdata')
##~ )
```
```{r eval=isShiny}
output$crossSelection <- renderPrint({
   cell <- input$cross_cells_selected
   isNULL <- !sum(dim(cell))
   da <- list(cell=cell
             ,sRow=if (isNULL) NULL else cell[1,1]
             ,sColumn=if (isNULL) NULL else cell[1,2]
             ,row=input$cross_rows_selected
             ,column=input$cross_columns_selected
             ,listCF=input$listCF_rows_selected
             ,cfdata=input$cfdata_rows_selected
             )
   str(da)
})
```

```{r,eval=isShiny}
output$cfmeta <- renderText({
   ind <- input$tbl_rows_selected
   req(is.integer(ind))
   tbl <- rvActivityStat()[ind,,drop=TRUE]
   paste0(ifelse(hlink,"<a href=#section-table>",""),tbl[[1]]
         ,ifelse(hlink,"</a>","")," - ",tbl[[2]])
})
```

```{r eval=isShiny & hlink}
output$cflink <- renderText({
   paste0("<a href=#section-cfmap>","Details","</a>")
})
```

```{r eval=isShiny}
output$cfdata <- DT::renderDT({
   cat("renderDT 'cfdata':\n")
   cf <- gsub("^(\\d{4}).*","\\1",input$cfcode)
   req(cf %in% spec$cf)
   str(cf)
   da <- human_use(cf)
   str(da)
   if (hlink)
      da$Industry <- paste0("<a href=#section-industry>",da$Industry,"</a>")
  # b <- DT::datatable(b)
   b <- DT::datatable(da,rownames=FALSE,escape=FALSE,selection="single"
                       ,extensions="Scroller"
                       ,options=list(NULL
                                    ,ordering=F
                                    ,scroller=T
                                    ,scrollY="calc(100vh - 265px)"
                                    ,pageLength=nrow(da)
                                    ,dom="ift"
                                    )
                       )
   b <- DT::formatStyle(b,colnames(da)
                     ,backgroundColor=DT::styleEqual(c('0','1','2'
                                                      ,kwdGreen,kwdYellow,kwdRed
                                                     )
                                           ,c("palegreen","LemonChiffon","lightsalmon"
                                             ,"palegreen","LemonChiffon","lightsalmon"))
                     ,backgroundSize='95% 18pt'
                     ,backgroundRepeat='no-repeat'
                     ,backgroundPosition='center'  
                     )
   b
})
```

## Right column {data-width=200}

### Industry description {data-height=300}

```{r eval=isShiny}
renderUI({
   cat("Industry description:\n")
   req(industry <- rvSelectIndustry())
  # activity <- names(industries)[sapply(industries,function(a) input$industry %in% a)]
   activity <- names(industry)
  # activity <- names(industries)[input$cfdata_rows_selected]
   fname <- paste0("include/industry-",activity,".Rmd")
   print(file.exists(fname))
   print(fname)
   if (F) {
      a1 <- knitr::knit(fname,quiet=FALSE)
      a2 <- markdown::markdownToHTML(a1,fragment.only=TRUE)
      ret <- HTML(a2)
      str(ret)
   }
   else {
     # wd <- setwd(dirname(fname))
      fileout <- "res1.html" # "res1.html" ## tempfile()
      rmarkdown::render(fname
                       ,output_format=rmarkdown::html_fragment()
                      # ,output_format=rmarkdown::html_vignette(css=NULL)
                       ,output_file=fileout,quiet=TRUE
                      # ,params=list(prm=analysis(),kind=1L)
                       )
      fileout <- file.path(dirname(fname),fileout)
      a0 <- read_xml(fileout)
      a1 <- as_list(a0)
      id <- paste0("i",digest::digest(unname(industry),"crc32"))
      ind <- which(!sapply(a1[[1]],function(b1) isTRUE(id==attr(b1,"id"))))
      for (i in rev(tail(ind,-1))) {
         xml_remove(xml_child(a0,search=i))
      }
     # fileout <- gsub("res1","res2",fileout)
      write_html(a0,fileout)
      ret <- scan(fileout,what=character(),encoding="UTF-8",quiet=TRUE)
      ret <- HTML(ret)
     # ret <- paste0(ret,collapse="\n")
      str(ret)
     # ret <- fileout
      file.remove(fileout)
   }
   ret
})
```

### Cell comment {data-height=100}

```{r eval=isShiny}
renderText({
   cat("Cell comment:\n")
  # req(cf <- rvSelectCF())
   req(industry <- rvSelectIndustry())
   activity <- names(industry)
  # req(as.integer(input$cfdata_rows_selected))
  # req(as.integer(input$cfcode))
  # print("
  # ind <- input$tbl_rows_selected
  # req(is.integer(ind))
  # tbl <- rvActivityStat()[ind,,drop=TRUE]
  # ind2 <- ursa:::.sample(grep(tbl[[1]],cfmeta$CF_code))
  # req(length(ind2)>0)
  # cf <- cfmeta$label[ind2]
   cf <- input$cfcode # gsub("^(\\d{4}).*","\\1",cf) # input$cfcode
  # industry <- unname(unlist(industries)[input$cfdata_rows_selected])
  #s activity <- names(industries)[sapply(industries,function(a) input$industry %in% a)]
  # activity <- names(industries)[sapply(industries,function(a) industry %in% a)]
   paste("A comment for",dQuote(industry),"of",dQuote(activity),"human use"
        ,"which is placed for",dQuote(cf),"conservation feature")
})
```

# Industry seasonal {#seasonIndustry data-orientation="columns"}

## {data-width=500}

### All compatibilities for a single Indusrty {#dummy data-width=500}

```{r eval=T & isShiny}
fillCol(flex=c(NA,1)
       ##~ ,shiny::selectInput("cfcode","CF from crosstable",nameInit,width=width)
       ,selectInput("industry","Industry"
                   ,choices=nameInit
                  # ,selected=sample(cfmeta$label,1)
                   ,width=width)
      # ,textOutput("crossCol")
      ##~ # ,htmlOutput('cflink')
       ##~ ,htmlOutput('cfmeta')
      # ,verbatimTextOutput("crossSelection")
       ,DT::DTOutput("industrydata")
       )
```
```{r eval=isShiny}
output$industrydata <- DT::renderDT({
   cat("renderDT 'industrydata':\n")
   industry <- rvSelectIndustry()
   cat("--- industry ----\n")
   str(industry)
   cat("--- industry ----\n")
   req(industry)
   da <- human_use(industry)
   str(da)
   if (hlink)
      da$'CF Code' <- paste0("<a href=#section-industry>",da$'CF Code',"</a>")
  # b <- DT::datatable(b)
   b <- DT::datatable(da,rownames=FALSE,escape=FALSE,selection="single"
                       ,extensions="Scroller"
                       ,options=list(NULL
                                    ,ordering=F
                                    ,scroller=T
                                    ,scrollY="calc(100vh - 265px)"
                                    ,scrollX=TRUE
                                    ,pageLength=nrow(da)
                                    ,dom="ift"
                                    )
                       )
   b <- DT::formatStyle(b,colnames(da)
                     ,backgroundColor=DT::styleEqual(c('0','1','2'
                                                      ,kwdGreen,kwdYellow,kwdRed
                                                     )
                                           ,c("palegreen","LemonChiffon","lightsalmon"
                                             ,"palegreen","LemonChiffon","lightsalmon"))
                     ,backgroundSize='95% 18pt'
                     ,backgroundRepeat='no-repeat'
                     ,backgroundPosition='center'  
                     )
   b
})
```

## Right column {data-width=200}

### Vacant {data-height=300}

```{r eval=isShiny}
```

### Vacant {data-height=300}

```{r eval=isShiny}
```

### Cell comment {data-height=100}

```{r eval=isShiny}
renderText({
   cat("Cell comment:\n")
  # req(cf <- rvSelectCF())
   req(industry <- rvSelectIndustry())
   activity <- names(industry)
  # req(as.integer(input$cfdata_rows_selected))
  # req(as.integer(input$cfcode))
  # print("
  # ind <- input$tbl_rows_selected
  # req(is.integer(ind))
  # tbl <- rvActivityStat()[ind,,drop=TRUE]
  # ind2 <- ursa:::.sample(grep(tbl[[1]],cfmeta$CF_code))
  # req(length(ind2)>0)
  # cf <- cfmeta$label[ind2]
   cf <- input$cfcode # gsub("^(\\d{4}).*","\\1",cf) # input$cfcode
  # industry <- unname(unlist(industries)[input$cfdata_rows_selected])
  #s activity <- names(industries)[sapply(industries,function(a) input$industry %in% a)]
  # activity <- names(industries)[sapply(industries,function(a) industry %in% a)]
   paste("A comment for",dQuote(industry),"of",dQuote(activity),"human use"
        ,"which is placed for",dQuote(cf),"conservation feature")
})
```

# Customization {#trafficlight data-orientation="columns"}

## Left column {data-width=500}

### Traffic light {data-width=500}

```{r}
#output$trafficMap <- 
renderLeaflet({
   if (F)
      return(conflictMap())
   cat("trafficMap:\n")
   industry <- rvSelectIndustry()
   req(industry)
  # a <- rvActivity()$map
   print(industry)
   showNotification(id="trafficMap",closeButton=FALSE,duration=120,"Traffic lights..."
                   ,type="warning")
   a <- interimMap(industry=unname(industry))
   removeNotification(id="trafficMap")
   print(a)
   req(!is.null(a))
   coloring <- names(methodList[match(input$coloring,methodList)])
   d6 <- map3_1d(a,kind=coloring,source=input$sheet)
  # write_envi(d6,"c:/tmp/tmp_d6")
   aoi <- NULL # rvAOI()
  # if (!is.null(aoi))
  #    saveRDS(aoi,"c:/tmp/tmp_d6.rds")
   m <- conflictMap(d6,aoi=aoi)
   m
})

```
## Right column {data-width=200}

```{r eval=isShiny}
   selectInput("coloring","Colorization",unname(methodList)
             # ,selected=grep("overlap",methodList,value=TRUE)
              ,width=width)
```

### Dev


```{r, eval=isShiny}
renderPrint({
   rvSelectIndustry()
})
```
